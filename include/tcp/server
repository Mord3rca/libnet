#ifndef LIBNET_TCP_EVENT_H
#define LIBNET_TCP_EVENT_H

#include <stdexcept>

#include <string>
#include <vector>

#include <atomic>

#include <ctime>

extern "C"
{
  #include <arpa/inet.h>
  #include <sys/types.h>
  #include <sys/socket.h>
  #include <netdb.h>
  
  #include <poll.h>
}

#include "tcp/utils"
#include "tcp/worker"

namespace tcp
{
  class Server
  {
  public:
    Server();
    Server(const std::string &ip, const unsigned int port);
    
    ~Server();
    
    void bind(const std::string &ip, const unsigned int port);
    
    void start();
    void stop();
    
    bool isRunning() const noexcept;
    
    void addWorker( IEventWorker* worker);
    
    void setMaxConnection(int maxconn) noexcept;
    
  private:
    int m_sockfd, m_maxconn;
    std::atomic<bool> m_run;
    std::vector<IEventWorker*> m_workers;
    
    IEventWorker* _distribute( void );
  };
}

#endif //LIBNET_TCP_EVENT_H
